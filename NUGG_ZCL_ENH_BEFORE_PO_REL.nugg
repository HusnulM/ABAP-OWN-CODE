<?xml version="1.0" encoding="utf-8"?>
<nugget name="ZCL_ENH_BEFORE_PO_REL">
 <CLAS CLSNAME="ZCL_ENH_BEFORE_PO_REL" VERSION="1" LANGU="E" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <implementing CLSNAME="ZCL_ENH_BEFORE_PO_REL" REFCLSNAME="/IWWRK/IF_WF_WI_BEFORE_UPD_IB" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <interfaceMethod CLSNAME="ZCL_ENH_BEFORE_PO_REL" CPDNAME="/IWWRK/IF_WF_WI_BEFORE_UPD_IB~BEFORE_UPDATE">
   <source>METHOD /iwwrk/if_wf_wi_before_upd_ib~before_update.
    DATA ls_object          TYPE swr_obj_2.
    DATA lv_retcode         TYPE sy-subrc.

    DATA: lv_po_num       TYPE ebeln,
          lv_po_itm       TYPE ebelp,
          lv_user_id      TYPE syuname,
          ls_wiid_boident TYPE mmpur_utils_workitem_boident,
          ls_wfl_inb      TYPE mmpur_utils_workflow_task,
          lo_wf_api       TYPE REF TO cl_mm_pur_util_apv_wf_api.

    DATA : ls_docid  TYPE  soentryi1,
           lv_subrc  TYPE  sy-subrc,
           lv_doc_id TYPE  sofolenti1-doc_id.

    DATA: ls_header     TYPE thead,
          lt_lines      TYPE STANDARD TABLE OF tline,
          lw_lines      LIKE LINE OF lt_lines,
          lt_lines_prev TYPE STANDARD TABLE OF tline,
          lw_lines_prev LIKE LINE OF lt_lines_prev,
          lw_usr        TYPE v_usr_name.

    DATA ls_comments_line   LIKE LINE OF it_wf_container_tab.

    CONSTANTS : co_rej TYPE char10 VALUE &apos;F04&apos;,
                co_app TYPE char10 VALUE &apos;F25&apos;.

* Get PR object ID and item number from UTIl class.
    lo_wf_api = cl_mm_pur_util_apv_wf_api=&gt;get_instance( ).
    lv_user_id = sy-uname.
    ls_wfl_inb-workitem_id = is_wi_details-wi_id.

    IF lo_wf_api IS NOT INITIAL.
* Get the Object Information from WorkItem.
      CALL METHOD lo_wf_api-&gt;get_boident_for_workitem
        EXPORTING
          iv_user_id        = lv_user_id
          is_workflow_inbox = ls_wfl_inb
        IMPORTING
          es_wiid_boident   = ls_wiid_boident.
* Check, that the PR is found for the given Workitem ID
      IF ls_wiid_boident IS NOT INITIAL.
        lv_po_num = ls_wiid_boident-object_id.
        lv_po_itm = ls_wiid_boident-object_line.
      ELSE.
*   Handle error
        RETURN.
      ENDIF.
    ENDIF.

    &quot;Access the workflow data
    CALL FUNCTION &apos;SAP_WAPI_GET_OBJECTS&apos;
      EXPORTING
        workitem_id      = is_wi_details-wi_id
      IMPORTING
        leading_object_2 = ls_object.

    IF lv_po_num IS INITIAL.
      lv_po_num = ls_object-instid(10).
    ENDIF.

    CASE iv_decision_key.
      WHEN 0001. &quot;Approve

        READ TABLE it_wf_container_tab INTO ls_comments_line WITH KEY element = &apos;ACTION_COMMENTS&apos;.
        IF sy-subrc EQ 0.
          REFRESH : lt_lines, lt_lines_prev.

          SELECT SINGLE * INTO lw_usr FROM v_usr_name WHERE bname = lv_user_id.

          SELECT SINGLE * FROM ekko
            INTO @data(ls_data)
              WHERE ebeln = @lv_po_num.

          ls_header-tdobject  = &apos;EKKO&apos;.
          ls_header-tdid      = co_app.
          ls_header-tdname    = lv_po_num.
          ls_header-tdspras   = sy-langu.


          CALL FUNCTION &apos;READ_TEXT&apos;
            EXPORTING
              id                      = ls_header-tdid
              language                = ls_header-tdspras
              name                    = ls_header-tdname
              object                  = ls_header-tdobject
            TABLES
              lines                   = lt_lines_prev
            EXCEPTIONS
              id                      = 1
              language                = 2
              name                    = 3
              not_found               = 4
              object                  = 5
              reference_check         = 6
              wrong_access_to_archive = 7
              OTHERS                  = 8.

          IF lt_lines_prev[] IS NOT INITIAL.
            LOOP AT lt_lines_prev INTO lw_lines_prev.
              lw_lines-tdformat = lw_lines_prev-tdformat.
              lw_lines-tdline   = lw_lines_prev-tdline.
              APPEND lw_lines TO lt_lines.
            ENDLOOP.
          ENDIF.

          lw_lines-tdformat = &apos;*&apos;.

          IF lw_usr-name_text EQ &apos;&apos;.
            lw_lines-tdline   = lv_user_id.
          ELSE.
            lw_lines-tdline   = lw_usr-name_text.
          ENDIF.

          APPEND lw_lines TO lt_lines.

          LOOP AT it_wf_container_tab INTO ls_comments_line.
            lw_lines-tdformat = &apos;*&apos;.
            lw_lines-tdline   = ls_comments_line-value.
            APPEND lw_lines TO lt_lines.
          ENDLOOP.

          CALL FUNCTION &apos;SAVE_TEXT&apos;
            EXPORTING
              client          = sy-mandt
              header          = ls_header
              savemode_direct = &apos;X&apos;
            TABLES
              lines           = lt_lines
            EXCEPTIONS
              id              = 1
              language        = 2
              name            = 3
              object          = 4
              OTHERS          = 5.

          CALL FUNCTION &apos;BAPI_TRANSACTION_COMMIT&apos;
            EXPORTING
              wait = &apos;X&apos;.

        ENDIF.
      WHEN 0002. &quot;Rejected

        READ TABLE it_wf_container_tab INTO ls_comments_line WITH KEY element = &apos;ACTION_COMMENTS&apos;.
        IF sy-subrc EQ 0.
          REFRESH : lt_lines.

          SELECT SINGLE * INTO lw_usr FROM v_usr_name WHERE bname = lv_user_id.

          IF lw_usr-name_text EQ &apos;&apos;.
            lw_lines-tdline   = lv_user_id.
          ELSE.
            lw_lines-tdline   = lw_usr-name_text.
          ENDIF.

          lw_lines-tdformat = &apos;*&apos;.
          APPEND lw_lines TO lt_lines.

          LOOP AT it_wf_container_tab INTO ls_comments_line.
            lw_lines-tdformat = &apos;*&apos;.
            lw_lines-tdline   = ls_comments_line-value.
            APPEND lw_lines TO lt_lines.
          ENDLOOP.

          ls_header-tdobject  = &apos;EKKO&apos;.
          ls_header-tdid      = co_rej.
          ls_header-tdname    = lv_po_num.
          ls_header-tdspras   = sy-langu.


          CALL FUNCTION &apos;SAVE_TEXT&apos;
            EXPORTING
              client          = sy-mandt
              header          = ls_header
              savemode_direct = &apos;X&apos;
            TABLES
              lines           = lt_lines
            EXCEPTIONS
              id              = 1
              language        = 2
              name            = 3
              object          = 4
              OTHERS          = 5.

          CALL FUNCTION &apos;BAPI_TRANSACTION_COMMIT&apos;
            EXPORTING
              wait = &apos;X&apos;.

        ENDIF.
    ENDCASE.
  ENDMETHOD.</source>
  </interfaceMethod>
 </CLAS>
</nugget>
